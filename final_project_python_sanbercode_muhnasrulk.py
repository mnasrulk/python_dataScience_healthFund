# -*- coding: utf-8 -*-
"""Final_project_python_sanbercode_muhnasrulk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UAuur_rMNwRzE_gfjM9sNyUnNtwAVrZ1
"""

import warnings
warnings.filterwarnings('ignore')

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

"""#Reading Data"""

#load dataset
df = pd.read_csv('Data_Negara_HELP.csv')
df

df.shape

df.info()

df.describe()

"""#EDA

### Univariate Analysis
"""

plt.figure(figsize=(12,8))

for i in enumerate(df.describe().columns):
  plt.subplot(3,3,i[0]+1)
  sns.distplot(df[i[1]])
plt.show()

"""### Bivariate"""

#sorting value kesehatan terendah
health = df.sort_values('Kesehatan', ascending=False)
health

#sorting Pendapatan terendah
Pendapatan = df.sort_values('Pendapatan', ascending=False)
Pendapatan

#Visualisasi Data Kesehatan per Negara
plt.figure(figsize=(14,6))
plt.subplot(2,1,1)
sns.barplot(health.Negara.head(), health.Kesehatan.head())
plt.title('Top Highest Health')
plt.subplot(2,1,2)
sns.barplot(health.Negara.tail(), health.Kesehatan.tail())
plt.title('Top lowest Health')
plt.tight_layout()
plt.show()

#Visualisasi GDP per Kapita per Negara
plt.figure(figsize=(14,6))
plt.subplot(2,1,1)
sns.barplot(Pendapatan.Negara.head(), Pendapatan.Pendapatan.head())
plt.title('Top Highest Income')
plt.subplot(2,1,2)
sns.barplot(Pendapatan.Negara.tail(), Pendapatan.Pendapatan.tail())
plt.title('Top lowest Income')
plt.tight_layout()
plt.show()

"""## Multivariate"""

sns.heatmap(df.corr(), annot=True, fmt='.2g');

"""# Outlier"""

sns.boxplot('Kesehatan', data=df)

sns.boxplot('Pendapatan', data=df)

def finding_outlier(df):
  Q1 = df.quantile(0.25)
  Q3 = df.quantile(0.75)
  IQR = Q3-Q1
  df_final = df[(df<(Q1-(1.5*IQR))) | (df>(Q3+(1.5*IQR)))]
  return df_final

print(finding_outlier(df['Kesehatan']))
print(finding_outlier(df['Pendapatan']))

def remove_outlier(df):
  Q1 = df.quantile(0.25)
  Q3 = df.quantile(0.75)
  IQR = Q3-Q1
  df_final = df[~(df>(Q1-(1.5*IQR))) | (df<(Q3+(1.5*IQR)))]
  return df_final

df2 = remove_outlier(df[['Pendapatan', 'Kesehatan']])

df2.dropna(axis=0, inplace=True)
df2

sns.boxplot('Kesehatan', data=df2)

sns.boxplot('Pendapatan', data=df2)

df2['Pendapatan'].unique()

"""#Scaling Data"""

#Scaling
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
df_std = sc.fit_transform(df2)

#Clustering KMeans
from sklearn.cluster import KMeans

kmeans1 = KMeans(n_clusters = 2, random_state=42).fit(df_std)
labels1 = kmeans1.labels_
labels1

new_df = pd.DataFrame(data=df_std, columns=['Pendapatan', 'Kesehatan'])
new_df['label1_kmeans'] = labels1
new_df

plt.figure(figsize=(12,8))

plt.scatter(new_df['Pendapatan'][new_df.label1_kmeans==0], new_df['Kesehatan'][new_df.label1_kmeans==0], c='blue', s=100, edgecolors='green')
plt.scatter(new_df['Pendapatan'][new_df.label1_kmeans==1], new_df['Kesehatan'][new_df.label1_kmeans==1], c='red', s=100, edgecolors='green')

plt.scatter(kmeans1.cluster_centers_[:,0], kmeans1.cluster_centers_[:,0], c='k', s=300)

plt.show()

wcss = []
for i in range(1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
  kmeans.fit(df_std)
  wcss.append(kmeans.inertia_)

plt.plot(range(1,11), wcss)
plt.title('Elbow method')
plt.xlabel('n_clusters')
plt.ylabel('wcss')

plt.show()

kmeans2= KMeans(n_clusters = 4, init='k-means++', random_state=42)
kmeans2.fit(df_std)
labels2 = kmeans2.labels_

new_df['label2_kmeans'] = labels2
new_df

plt.figure(figsize=(12,8))

plt.scatter(new_df['Pendapatan'][new_df.label2_kmeans==0], new_df['Kesehatan'][new_df.label2_kmeans==0], c='blue', s=100, edgecolors='green')
plt.scatter(new_df['Pendapatan'][new_df.label2_kmeans==1], new_df['Kesehatan'][new_df.label2_kmeans==1], c='red', s=100, edgecolors='green')
plt.scatter(new_df['Pendapatan'][new_df.label2_kmeans==2], new_df['Kesehatan'][new_df.label2_kmeans==2], c='green', s=100, edgecolors='green')
plt.scatter(new_df['Pendapatan'][new_df.label2_kmeans==3], new_df['Kesehatan'][new_df.label2_kmeans==3], c='yellow', s=100, edgecolors='green')

plt.scatter(kmeans2.cluster_centers_[:,0], kmeans2.cluster_centers_[:,1], c='k', s=300)
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score

print(silhouette_score(df_std, labels= labels1))
print(silhouette_score(df_std, labels= labels2))

"""### Inverse Transform"""

from sklearn.cluster import KMeans
kmeansa = KMeans(n_clusters = 2, random_state=42).fit(sc.inverse_transform(df_std))
labelsa = kmeansa.labels_
labelsa

kmeansb = KMeans(n_clusters = 4, init='k-means++', random_state=42).fit(df_std)
labelsb = kmeansb.labels_
labelsb

new_df1 = pd.DataFrame(data=sc.inverse_transform(df_std), columns=['Pendapatan', 'Kesehatan'])
new_df1['label1_kmeans'] = labelsa
new_df1['label2_kmeans'] = labelsb
new_df1

plt.figure(figsize=(12,8))

plt.scatter(new_df1['Pendapatan'][new_df1.label1_kmeans==0], new_df1['Kesehatan'][new_df1.label1_kmeans==0], c='blue', s=100, edgecolors='green')
plt.scatter(new_df1['Pendapatan'][new_df1.label1_kmeans==1], new_df1['Kesehatan'][new_df1.label1_kmeans==1], c='red', s=100, edgecolors='green')

plt.scatter(kmeansa.cluster_centers_[:,0], kmeansa.cluster_centers_[:,1], c='k', s=300)

plt.show()

plt.figure(figsize=(12,8))

plt.scatter(new_df1['Pendapatan'][new_df1.label2_kmeans==0], new_df1['Kesehatan'][new_df1.label2_kmeans==0], c='blue', s=100, edgecolors='green')
plt.scatter(new_df1['Pendapatan'][new_df1.label2_kmeans==1], new_df1['Kesehatan'][new_df1.label2_kmeans==1], c='red', s=100, edgecolors='green')
plt.scatter(new_df1['Pendapatan'][new_df1.label2_kmeans==2], new_df1['Kesehatan'][new_df1.label2_kmeans==2], c='green', s=100, edgecolors='green')
plt.scatter(new_df1['Pendapatan'][new_df1.label2_kmeans==3], new_df1['Kesehatan'][new_df1.label2_kmeans==3], c='yellow', s=100, edgecolors='green')

#plt.scatter(kmeansb.cluster_centers_[:,0], kmeansb.cluster_centers_[:,1], c='k', s=300)
plt.legend()
plt.title('Kluster Negara yang Membutuhkan')
plt.xlabel('Pendapatan')
plt.ylabel('Kesehatan')
plt.show()

#Kesimpulan
df['K_means_labels'] = pd.Series(labelsb).astype('object')
df

#Filtering

need = df[df['K_means_labels']==1]

need

need.sort_values(by=['Pendapatan'], ascending=True)[:10]

"""
### 3D Visualization"""

df3 = remove_outlier(df[['Pendapatan', 'Kesehatan', 'Harapan_hidup']])
df3.dropna(axis=0, inplace=True)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
df_std = sc.fit_transform(df3.astype(float))

kmeans3 = KMeans(n_clusters = 4, init='k-means++', random_state=42).fit(df_std)
labels3 = kmeans3.labels_

new_df= pd.DataFrame(data=df_std, columns=['Pendapatan', 'Kesehatan', 'GDPperkapita'])
new_df['label3_kmeans'] = labels3
new_df

fig = plt.figure(figsize=(12,8))
ax = fig.add_subplot(111, projection='3d')

ax.scatter(new_df['Pendapatan'][new_df.label3_kmeans==0], new_df['Kesehatan'][new_df.label3_kmeans==0], new_df['GDPperkapita'][new_df.label3_kmeans==0], c='blue', s=100, edgecolors='green')
ax.scatter(new_df['Pendapatan'][new_df.label3_kmeans==1], new_df['Kesehatan'][new_df.label3_kmeans==1], new_df['GDPperkapita'][new_df.label3_kmeans==1], c='red', s=100, edgecolors='green')
ax.scatter(new_df['Pendapatan'][new_df.label3_kmeans==2], new_df['Kesehatan'][new_df.label3_kmeans==2], new_df['GDPperkapita'][new_df.label3_kmeans==2], c='green', s=100, edgecolors='green')
ax.scatter(new_df['Pendapatan'][new_df.label3_kmeans==3], new_df['Kesehatan'][new_df.label3_kmeans==3], new_df['GDPperkapita'][new_df.label3_kmeans==3],c='yellow', s=100, edgecolors='green')

scatter = ax.scatter(kmeans3.cluster_centers_[:, 0],
            kmeans3.cluster_centers_[:, 1],
            kmeans3.cluster_centers_[:, 2],
            s = 250,
            marker='o',
            c='k',
            label='centroids')
plt.title('Negara yang Membutuhkan')
plt.xlabel('Pendapatan')
plt.ylabel('Kesehatan')
ax.set_zlabel('Harapan_hidup')
plt.show()